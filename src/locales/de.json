{
  "button":{
    "add": "Hinzufügen",
    "save": "Speichern",
    "cancel": "Abbrechen",
    "delete": "Löschen",
    "edit": "Bearbeiten",
    "close": "Schließen",
    "import": "Importieren",
    "export": "Exportieren",
    "clear": "Löschen",
    "load": "Laden",
    "start": "Start",
    "stop": "Stop",
    "step": "Schritt",
    "reset": "Reset",
    "run": "Ausführen",
    "back": "Zurück",
    "next": "Weiter"
  },
  "generell": {
    "changeValue": "Wert Ändern",
    "number": "Zahl"
  },
  "nav": {
    "overview": "Overview",
    "control-table": "Signal Table",
    "addRegister": "Register",
    "debugger": "Debugger",
    "memory": "Speicher",
    "machineConfig": "Maschinenkonfiguration",
    "aluConfig": "ALU Konfiguration",
    "muxConfig": "Multiplexer Konfiguration"
  },
  "mux":{
    "register_choose": "Register wählen"
  },
  "memory":{
    "import": "Datei Importieren",
    "clear": "Speicher Löschen",
    "save": "Speichern",
    "load": "Laden",
    "memory": "Speicher",
    "address": "Adresse",
    "addresses": "Adressen",
    "value": "Wert",
    "decimal": "Dezimal",
    "page": "Seite",
    "from": "von",
    "type": "Typ",
    "startAddress": "Von Adresse",
    "endAddress": "bis Adresse",
    "selectFile": "Datei auswählen",
    "export": "Datei Exportieren",
    "fileSize": "Dateigröße"
  },
  "register":{
    "baseRegister": "Basisregister",
    "extendedRegister": "Erweiterte Register",
    "description": "Beschreibung",
    "pc": "Speichert die Adresse des nächsten auszuführenden Assembler-Befehls. Die 8 höchstwertigen Bits sind normalerweise Null.",
    "ir": "Enthält den aktuell ausgeführten Assemblerbefehl. Die 8 höchstwertigen Bits enthalten den OP-Code, die 24 niedrigwertigen Bits enthalten den Parameter.",
    "mdr": "Datenschnittstelle für Schreib- und Leseoperationen auf dem Hauptspeicher.\nMögliche Mikrobefehle sind:\n\nM[MAR] ← MDR\nMDR ← M[MAR]",
    "mar": "Adressschnittstelle für Schreib- und Leseoperationen auf dem Hauptspeicher.\nMögliche Mikrobefehle sind:\n\nM[MAR] ← MDR\nMDR ← M[MAR]",
    "accu": "Üblicherweise das benutzte Arbeitsregister für die meisten arithmetischen Operationen."
  },
  "alu":{
    "addedOps": "Hinzugefügte Operationen",
    "availableOps": "Verfügbare Operationen",
    "currentOps": "Aktuelle Operationen",
    "add": "Addiert A und B.",
    "B_sub_A": "Subtrahiert B von A.",
    "A_sub_B": "Subtrahiert A von B.",
    "transferA": "Leitet A unverändert durch die ALU.",
    "transferB": "Leitet B unverändert durch die ALU.",
    "incA": "Erhöht A um 1.",
    "incB": "Erhöht B um 1.",
    "decA": "Verringert A um 1.",
    "decB": "Verringert B um 1.",
    "A_mul_B": "Multipliziert A mit B.",
    "A_div_B": "Teilt A ganzzahlig durch B. Division durch 0 ergibt 0.",
    "B_div_A": "Teilt B ganzzahlig durch A. Division durch 0 ergibt 0.",
    "A_mod_B": "Berechnet den Rest der ganzzahligen Division von A durch B.",
    "B_mod_A": "Berechnet den Rest der ganzzahligen Division von B durch A.",
    "A_and_B": "Bitweise UND-Verknüpfung von A und B.",
    "A_OR_B": "Bitweise ODER-Verknüpfung von A und B.",
    "A_XOR_B": "Bitweise XOR-Verknüpfung von A und B.",
    "INV_A": "Invertiert A bitweise.",
    "INV_B": "Invertiert B bitweise.",
    "A_SL": "Shift left: Verschiebt alle Bits von A um eine Stelle nach links. Das MSB wird verworfen, das LSB wird auf 0 gesetzt.",
    "B_SL": "Shift left: Verschiebt alle Bits von B um eine Stelle nach links. Das MSB wird verworfen, das LSB wird auf 0 gesetzt.",
    "A_SR": "Shift right: Verschiebt alle Bits von A um eine Stelle nach rechts. Das LSB wird verworfen, das MSB wird vorzeichenrichtig ergänzt.",
    "B_SR": "Shift right: Verschiebt alle Bits von B um eine Stelle nach rechts. Das LSB wird verworfen, das MSB wird vorzeichenrichtig ergänzt.",
    "A_SL_B": "Shift left: Verschiebt alle Bits von A um B Stellen nach links. Die MSBs werden verworfen, die LSBs werden auf 0 gesetzt.",
    "B_SL_A": "Shift left: Verschiebt alle Bits von B um A Stellen nach links. Die MSBs werden verworfen, die LSBs werden auf 0 gesetzt.",
    "A_SR_B": "Shift right: Verschiebt alle Bits von A um B Stellen nach rechts. Die LSBs werden verworfen, die MSBs werden vorzeichenrichtig ergänzt.",
    "B_SR_A": "Shift right: Verschiebt alle Bits von B um A Stellen nach rechts. Die LSBs werden verworfen, die MSBs werden vorzeichenrichtig ergänzt.",
    "A_SRU": "Shift right unsigned mode: Verschiebt alle Bits von A um eine Stelle nach rechts. Das LSB wird verworfen, das MSB wird auf 0 gesetzt.",
    "B_SRU": "Shift right unsigned mode: Verschiebt alle Bits von B um eine Stelle nach rechts. Das LSB wird verworfen, das MSB wird auf 0 gesetzt.",
    "A_SRU_B": "Shift right unsigned mode: Verschiebt alle Bits von A um B Stellen nach rechts. Die LSBs werden verworfen, die MSBs werden auf 0 gesetzt.",
    "B_SRU_A": "Shift right unsigned mode: Verschiebt alle Bits von B um A Stellen nach rechts. Die LSBs werden verworfen, die MSBs werden auf 0 gesetzt.",
    "A_RL":  "Rotate left: Rotiert alle Bits von A um eine Stelle nach links. Das LSB erhält den vorherigen Wert des MSB.",
    "B_RL": "Rotate left: Rotiert alle Bits von B um eine Stelle nach links. Das LSB erhält den vorherigen Wert des MSB.",
    "A_RL_B": "Rotate left: Rotiert alle Bits von A um B Stellen nach links. Das LSB erhält in jedem Schritt den vorherigen Wert des MSB.",
    "B_RL_A": "Rotate left: Rotiert alle Bits von B um A Stellen nach links. Das LSB erhält in jedem Schritt den vorherigen Wert des MSB.",
    "A_RR": "Rotate right: Rotiert alle Bits von A um eine Stelle nach rechts. Das MSB erhält den vorherigen Wert des LSB.",
    "B_RR": "Rotate right: Rotiert alle Bits von B um eine Stelle nach rechts. Das MSB erhält den vorherigen Wert des LSB.",
    "A_RR_B": "Rotate right: Rotiert alle Bits von A um B Stellen nach rechts. Das MSB erhält in jedem Schritt den vorherigen Wert des LSB.",
    "B_RR_A": "Rotate right: Rotiert alle Bits von B um A Stellen nach rechts. Das MSB erhält in jedem Schritt den vorherigen Wert des LSB."
  },
  "tooltip": {
    "add": "Fügt eine neue Zeile hinzu",
    "start": "Startet die Maschine",
    "stop": "Stop",
    "step": "Führt einen Mikrobefehl aus",
    "run": "Führt die Maschine solange aus, bis sie stoppt oder ein Breakpoint erreicht wird",
    "reset": "Setzt die Maschine auf den Anfangszustand zurück"
  }
}