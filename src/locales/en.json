{
  "button": {
    "add": "Add",
    "save": "Save",
    "cancel": "Cancel",
    "delete": "Delete",
    "edit": "Edit",
    "close": "Close",
    "import": "Import",
    "export": "Export",
    "clear": "Clear",
    "load": "Load",
    "start": "Start",
    "stop": "Stop",
    "step": "Step",
    "reset": "Reset",
    "run": "Run",
    "back": "Back",
    "next": "Next"
  },
  "generell": {
    "changeValue": "Change Value",
    "number": "Number",
    "description": "Description",
    "currentValue": "Current Value"
  },
    "nav": {
        "overview": "Overview",
        "control-table": "Signal Table",
        "addRegister": "Register",
        "debugger": "Debugger",
        "memory": "Memory",
        "machineConfig": "Machine Configuration",
        "aluConfig": "ALU Configuration",
        "muxConfig": "Multiplexer Configuration"
      },  
      "mux":{
        "register_choose": "Choose Register"
      },
      "memory":{
        "import": "Import File",
        "export": "Export File",
        "clear": "Clear Memory",
        "save": "Save",
        "load": "Load",
        "memory": "Memory",
        "address": "Address",
        "addresses": "Addresses",
        "value": "Value",
        "decimal": "Decimal",
        "page": "Page",
        "from": "From",
        "type": "Typ",
        "startAddress": "Start Address",
        "endAddress": "End Address",
        "selectFile": "Select File",
        "fileSize": "File Size"
      },
      "register":{
        "baseRegister": "Base Register",
        "extendedRegister": "Extended Register",
        "description": "Description",
        "pc": "Stores the address of the next assembly instruction to be executed. The 8 most significant bits are usually zero.",
        "ir": "Contains the currently executed assembly instruction. The 8 most significant bits contain the opcode, and the 24 less significant bits contain the parameter.",
        "mdr": "Data interface for read and write operations on the main memory. Possible microinstructions are:\n\nM[MAR] ← MDR\nMDR ← M[MAR]",
        "mar": "Address interface for read and write operations on the main memory. Possible microinstructions are:\n\nM[MAR] ← MDR\nMDR ← M[MAR]",
        "accu": "Typically the working register used for most arithmetic operations."
      },
      "alu":{
        "addedOps": "Added Operations",
        "availableOps": "Available Operations",
        "currentOps": "Current Operations",
        "add-description": "Adds A and B.",
        "B_sub_A": "Subtracts A from B.",
        "A_sub_B": "Subtracts B from A.",
        "transferA": "Routes A unchanged through the ALU.",
        "transferB": "Routes B unchanged through the ALU.",
        "incA": "Increases A by 1.",
        "incB": "Increases B by 1.",
        "decA": "Decreases A by 1.",
        "decB": "Decreases B by 1.",
        "A_mul_B": "Multiplies A and B.",
        "A_div_B": "Divide A integer by B. Division by 0 results in 0.",
        "B_div_A": "Divide B integer by A. Division by 0 results in 0.",
        "A_mod_B": "Calculates the remainder of the integer division of A by B.",
        "B_mod_A": "Calculates the remainder of the integer division of B by A.",
        "A_and_B": "Bitwise AND operation of A and B.",
        "A_OR_B": "Bitwise OR operation of A and B.",
        "A_XOR_B": "Bitwise XOR operation of A and B.",
        "INV_A": "Inverts A bitwise.",
        "INV_B": "Inverts B bitwise.",
        "A_SL": "Shift left: Shifts all bits of A one position to the left. The MSB is discarded, the LSB is set to 0.",
        "B_SL": "Shift left: Shifts all bits of B one position to the left. The MSB is discarded, the LSB is set to 0.",
        "A_SR": "Shift right: Shifts all bits of A one position to the right. The LSB is discarded, the MSB is sign-extended.",
        "B_SR": "Shift right: Shifts all bits of B one position to the right. The LSB is discarded, the MSB is sign-extended.",
        "A_SL_B": "Shift left: Shifts all bits of A by B positions to the left. The MSBs are discarded, the LSBs are set to 0.",
        "B_SL_A": "Shift left: Shifts all bits of B by A positions to the left. The MSBs are discarded, the LSBs are set to 0.",
        "A_SR_B": "Shift right: Shifts all bits of A by B positions to the right. The LSBs are discarded, the MSBs are sign-extended.",
        "B_SR_A": "Shift right: Shifts all bits of B by A positions to the right. The LSBs are discarded, the MSBs are sign-extended.",
        "A_SRU": "Shift right unsigned mode: Shifts all bits of A one position to the right. The LSB is discarded, the MSB is set to 0.",
        "B_SRU": "Shift right unsigned mode: Shifts all bits of B one position to the right. The LSB is discarded, the MSB is set to 0.",
        "A_SRU_B": "Shift right unsigned mode: Shifts all bits of A by B positions to the right. The LSBs are discarded, the MSBs are set to 0.",
        "B_SRU_A": "Shift right unsigned mode: Shifts all bits of B by A positions to the right. The LSBs are discarded, the MSBs are set to 0.",
        "A_RL":  "Rotate left: Rotates all bits of A one position to the left. The LSB receives the previous value of the MSB.",
        "B_RL": "Rotate left: Rotates all bits of B one position to the left. The LSB receives the previous value of the MSB.",
        "A_RL_B": "Rotate left: Rotates all bits of A by B positions to the left. The LSB receives the previous value of the MSB in each step.",
        "B_RL_A": "Rotate left: Rotates all bits of B by A positions to the left. The LSB receives the previous value of the MSB in each step.",
        "A_RR": "Rotate right: Rotates all bits of A one position to the right. The MSB receives the previous value of the LSB.",
        "B_RR": "Rotate right: Rotates all bits of B one position to the right. The MSB receives the previous value of the LSB.",
        "A_RR_B": "Rotate right: Rotates all bits of A by B positions to the right. The MSB receives the previous value of the LSB in each step.",
        "B_RR_A": "Rotate right: Rotates all bits of B by A positions to the right. The MSB receives the previous value of the LSB in each step."
      },
      "tooltip": {
        "add": "Add a new Row",
        "start": "Starts the machine",
        "stop": "Stop",
        "step": "Executes the next microinstruction",
        "run": "Executes the machine until it reaches the end or a breakpoint",
        "reset": "Resets the machine"
      }
}